import { App } from 'obsidian';
import { ensureFolderExists } from './utils';

/**
 * Create template examples in C/Templates/Templates Examples/
 * Only creates files if they don't already exist
 */
export async function createTemplateExamples(app: App): Promise<void> {
	const examplesPath = 'C/Templates/Templates Examples';
	await ensureFolderExists(app, examplesPath);

	// Define all template examples
	const templates = [
		{
			name: 'A-Inbox-Ideas.md',
			content: `---
type: idea
status: 
date: 
tags:
  - {{VALUE:tags}}
lang: 
aliases:
---
## About:
{{VALUE:What is the idea about}}

## When do you expect to use it?

## How to use it?

## Other related notes?

`
		},
		{
			name: 'A-Contacts.md',
			content: `---
type: contact
name: "{{VALUE:name}}"
date: 
tags: 
role: "{{VALUE:role}}"
lang: 
aliases:
---

## ‚Ñπ Contact Info:

{{VALUE:main contact info}}
### üåê Website:

{{VALUE:website}}
### üìß email:

{{VALUE:email}}
### üì± Phone Number:

{{VALUE:Phone Number}}
### üîó LinkedIn:

{{VALUE:LinkedIn}}
## Other info:

{{VALUE:Other info}}
`
		},
		{
			name: 'A-Permanent Notes.md',
			content: `---
type: permanent
date:
tags:
  - {{VALUE:tags}}
lang:
aliases:
author:
verified: "{{VALUE: Is Verified}}"
importance: "{{VALUE: Importance from 1 to 5 }}"
when-to-use: "{{VALUE: When to use }}"
complexity: "{{VALUE: Complexity from 1 to 5 }}"
---
{{VALUE:The permanent note}}

## Sources:
{{VALUE:The Source}}

`
		},
		{
			name: 'A-Prompts.md',
			content: `---
type: prompt
date:
tags:
  - "{ VALUE:tags }":
lang:
aliases:
---
## Prompt:
{{VALUE:prompt}}

## Usages
(List of expected usages)

## Source:
{{VALUE:source}}

`
		},
		{
			name: 'A-Quotes.md',
			content: `---
type: quote
date:
tags:
  - {{VALUE:tags}}
lang:
  - en
aliases:
author:
verified: "{{VALUE: Is Verified}}"
importance: "{{VALUE: Importance from 1 to 5 }}"
when-to-use: "{{VALUE: When to use }}"
complexity: "{{VALUE: Complexity from 1 to 5 }}"
---
### Quote: 
#### {{VALUE:quote}}

### Author/Authors: 
#### {{VALUE:author}}

### The Related Permanent Notes:

###### Source:
 {{VALUE:source}}

###### Reference (Bibliography):

 {{VALUE:bibliography}}

`
		},
		{
			name: 'B-AI Consultants.md',
			content: `---
type: ai-tool
date: 
tags:
- {{VALUE:tags}} 
lang: []
aliases:
---
## {{VALUE:title}}

### Main Conversation URL:

{{VALUE:url}}

### Main AI tool :

{{VALUE:ai tool}}
{{VALUE:ai tool version}}
{{VALUE:company}}
### Main Prompt:

{{VALUE:prompt}}

### Bibliography-Example:
(GPT-4 Omni, response to ‚ÄúExplain how to make pizza dough from common household ingredients,‚Äù OpenAI, March 7, 2023)
### Bibliography:

{{VALUE:ai tool}}-{{VALUE:ai tool version}}, response to *"{{VALUE:prompt}}"*, {{VALUE:company}}, {{VALUE:date in Month dd, yyyy}}
# üìì Advisory Board-AI Consultants


***

## ‚ùì Question / Objective
(Write the main question or the conversation objective here)
{{VALUE:prompt}}

## üìã  Conversation
(Write the response to the questions and the the conversation here)

***

## üìù Highlights & Comments

***

# üó® Quotes
(Convert highlights into quotes if needed)
Use the following citation format:
{{VALUE:ai tool}}-{{VALUE:ai tool version}}, response to *"{{VALUE:prompt}}"*, {{VALUE:company}}, {{VALUE:date in Month dd, yyyy}}

`
		},
		{
			name: 'B-Literature Notes-Articles.md',
			content: `---
type: literature
date: 
author: 
tags:
- {{VALUE:tags}} 
lang: 
aliases: 
---
### Formatted Bibliography
{{VALUE:bibliography}}
# üìì The Literature Notes


## üìù Highlights & Comments


# üó® Quotes

{{VALUE:bibliography}}

# ‚úíThe Permanent Notes


###### Source:
 {{VALUE:source}}

`
		},
		{
			name: 'B-Literature Notes-YouTube Summaries.md',
			content: `---
type: literature
date: 
author: 
tags: 
- {{VALUE:tags}} 

published: 
lang: 
aliases:
---
### Formatted Bibliography
{{VALUE:bibliography}}

# üìì Literature Notes


## üìù Highlights & Comments

# üó® Quotes

{{VALUE:bibliography}}
# ‚úíThe Permanent Notes


###### Source:
 {{VALUE:source}}

`
		},
		{
			name: 'Content-to-D-Projects-Habits Power Website.md',
			content: `---
type: project
---
# 0 Introduction

# 1 Vision and Conceptual Foundation
## 1.1 Purpose of the Project
### 1.1.1 Mission Statement
### 1.1.2 Problem the Website Solves
### 1.1.3 Target Audience and Use Cases
## 1.2 Core Philosophy
### 1.2.1 Behavior Change through Design
### 1.2.2 The Relationship between Habits and Digital Tools
### 1.2.3 Empowerment through Self-Tracking
## 1.3 Strategic Goals
### 1.3.1 Increase Daily Engagement
### 1.3.2 Encourage Consistent Habit Formation
### 1.3.3 Build a Community around Self-Improvement

# 2 Research and Requirements
## 2.1 Market and User Research
### 2.1.1 Competitor Analysis (Habitica, Notion, etc.)
### 2.1.2 User Persona Development
### 2.1.3 Behavior Mapping and Pain Points
## 2.2 Functional Requirements
### 2.2.1 Core Features and Modules
### 2.2.2 User Roles and Permissions
### 2.2.3 Accessibility and Multilingual Needs
## 2.3 Technical Requirements
### 2.3.1 Technology Stack Evaluation
### 2.3.2 Hosting and Deployment Strategy
### 2.3.3 Security and Data Protection

# 3 Information Architecture
## 3.1 Structural Layout
### 3.1.1 Site Map and Navigation
### 3.1.2 Page Hierarchies
### 3.1.3 User Flow Scenarios
## 3.2 Content Architecture
### 3.2.1 Habits Library
### 3.2.2 User Dashboard
### 3.2.3 Progress Analytics Section
## 3.3 UX Planning
### 3.3.1 Wireframes
### 3.3.2 Low-Fidelity Prototypes
### 3.3.3 User Testing Feedback Loops

# 4 UI/UX Design
## 4.1 Visual Identity
### 4.1.1 Logo and Branding
### 4.1.2 Color Psychology (Focus, Calm, Energy)
### 4.1.3 Typography and Layout Grids
## 4.2 Experience Design
### 4.2.1 Simplicity and Clarity
### 4.2.2 Gamification and Motivation
### 4.2.3 Emotional Design and Encouragement
## 4.3 Design System
### 4.3.1 Reusable Components
### 4.3.2 Style Guide
### 4.3.3 Accessibility Standards

# 5 Front-End Development
## 5.1 Framework Selection
### 5.1.1 React or Vue Evaluation
### 5.1.2 Responsive Design and Mobile Priority
### 5.1.3 State Management (Redux, Pinia, or Context)
## 5.2 Component Development
### 5.2.1 Navigation and Layout Components
### 5.2.2 Habit Tracker Components
### 5.2.3 Data Visualization Elements (Charts, Progress Bars)
## 5.3 User Interaction Layer
### 5.3.1 Input Validation
### 5.3.2 Notifications and Feedback
### 5.3.3 Accessibility Controls

# 6 Back-End Development
## 6.1 Architecture and Framework
### 6.1.1 RESTful or GraphQL API Design
### 6.1.2 Framework Choice (Node.js, Django, etc.)
### 6.1.3 Authentication and Authorization
## 6.2 Database Design
### 6.2.1 Schema for Users and Habits
### 6.2.2 Progress Tracking Tables
### 6.2.3 Analytics and Insights Storage
## 6.3 Integration and Automation
### 6.3.1 Email/Notification System
### 6.3.2 API Integrations (Calendar, Wearables)
### 6.3.3 Scheduled Jobs for Reminders

# 7 Habit System Logic
## 7.1 Core Habit Engine
### 7.1.1 Habit Creation Model
### 7.1.2 Cue‚ÄìRoutine‚ÄìReward Algorithm
### 7.1.3 Habit Streak Tracking
## 7.2 Gamification Layer
### 7.2.1 Points and Levels
### 7.2.2 Achievement Badges
### 7.2.3 Community Challenges
## 7.3 Analytics and Feedback
### 7.3.1 Daily Progress Dashboard
### 7.3.2 Behavior Insights
### 7.3.3 Personalized Recommendations

# 8 Testing and Quality Assurance
## 8.1 Functional Testing
### 8.1.1 Unit Tests
### 8.1.2 Integration Tests
### 8.1.3 End-to-End Flow
## 8.2 Usability Testing
### 8.2.1 User Session Feedback
### 8.2.2 Accessibility Evaluation
### 8.2.3 A/B Design Testing
## 8.3 Performance and Security Testing
### 8.3.1 Load and Speed Optimization
### 8.3.2 Vulnerability Scanning
### 8.3.3 Data Encryption Verification

# 9 Deployment and Launch
## 9.1 Hosting Setup
### 9.1.1 Server Configuration
### 9.1.2 CI/CD Pipeline
### 9.1.3 Environment Variables
## 9.2 Pre-Launch Checklist
### 9.2.1 Final QA Review
### 9.2.2 SEO and Meta Tags
### 9.2.3 Beta Testing with Early Users
## 9.3 Launch Execution
### 9.3.1 Marketing Rollout
### 9.3.2 Community Onboarding
### 9.3.3 Support Channels Activation

# 10 Maintenance and Growth
## 10.1 Continuous Improvement
### 10.1.1 Feature Iteration Based on Feedback
### 10.1.2 Regular Updates and Fixes
### 10.1.3 Design Refinement
## 10.2 Data and Analytics
### 10.2.1 User Retention Metrics
### 10.2.2 Engagement Reports
### 10.2.3 Habit Success Rate Analysis
## 10.3 Long-Term Expansion
### 10.3.1 Mobile App Integration
### 10.3.2 AI Habit Coach Module
### 10.3.3 Partnerships and Ecosystem Growth
`
		},
		{
			name: 'Content-to-D-YouTube Channel-Build Better Habits.md',
			content: `---
type: project
---
# 1 Choosing a channel name
## 1.1 Search for similar channels to suggest a name

# 2 Choosing topics for the channel
## 2.1 Identify the target audience
## 2.2 Identify the interests of the target audience
## 2.3 Identify a list of suggested names

# 3 Preparing Programs and Hardware
## 3.1 Researching the software and hardware used in the broadcast
## 3.2 Purchasing equipment

# 4 Content Creation Process
## 4.1 Script Writing
## 4.2 Video Recording
## 4.3 Video Editing

# 5 Channel Growth Strategy
## 5.1 SEO Optimization
## 5.2 Thumbnail Design
## 5.3 Social Media Promotion
`
		},
		{
			name: 'Content-to-D-YouTube Channel-Breaking Bad Habits.md',
			content: `---
type: project
---
# 1 Research Phase
## 1.1 Understanding Bad Habit Psychology
## 1.2 Identifying Common Bad Habits
## 1.3 Analyzing Success Stories

# 2 Content Planning
## 2.1 Video Topics List
## 2.2 Episode Structure
## 2.3 Script Templates

# 3 Production Setup
## 3.1 Equipment Requirements
## 3.2 Filming Location
## 3.3 Lighting and Audio Setup

# 4 Content Creation
## 4.1 Episode Recording
## 4.2 Editing Process
## 4.3 Thumbnail Creation

# 5 Distribution Strategy
## 5.1 Upload Schedule
## 5.2 Cross-Platform Sharing
## 5.3 Community Engagement
`
		}
	];

	// Create each template file if it doesn't exist
	for (const template of templates) {
		const filePath = `${examplesPath}/${template.name}`;
		
		try {
			const existing = app.vault.getAbstractFileByPath(filePath);
			if (!existing) {
				await app.vault.create(filePath, template.content);
			}
		} catch (error) {
			// Silently ignore "already exists" errors - this is expected behavior
			if (error instanceof Error && error.message.includes('already exists')) {
				continue;
			}
			// Log other unexpected errors
			console.error(`Failed to create template example ${template.name}:`, error);
		}
	}
}

/**
 * Create Arabic template examples in ÿ™/ÿßŸÑŸÇŸàÿßŸÑÿ®/ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÑŸâ ÿßŸÑŸÇŸàÿßŸÑÿ®/
 * Only creates files if they don't already exist
 */
export async function createArabicTemplateExamples(app: App): Promise<void> {
    const examplesPath = 'ÿ™/ÿßŸÑŸÇŸàÿßŸÑÿ®/ÿ£ŸÖÿ´ŸÑÿ© ÿπŸÑŸâ ÿßŸÑŸÇŸàÿßŸÑÿ®';
    await ensureFolderExists(app, examplesPath);

    const templates = [
        {
            name: 'ÿ£-ÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ÿßŸÇÿ™ÿ®ÿßÿ≥ 
date:
tags:
  - {{VALUE:tags}}
ÿßŸÑŸÑÿ∫ÿ©:
  - ar
aliases:
ÿßŸÑŸÇÿßÿ¶ŸÑ:
ÿßŸÑÿ™ÿ≠ŸÇŸÇ: "{{VALUE: ŸáŸÑ ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ}}"
ÿßŸÑÿßŸáŸÖŸäÿ©: "{{VALUE: ÿßŸÑÿßŸáŸÖŸäÿ© ŸÖŸÜ 1 ÿ•ŸÑŸâ 5 }}"
ŸÖÿ™Ÿâ ÿ™ÿ≥ÿ™ÿÆÿØŸÖ: "{{VALUE: ŸÖÿ™Ÿâ ÿ™ÿ≥ÿ™ÿÆÿØŸÖ }}"
ÿßŸÑÿ™ÿπŸÇŸäÿØ: "{{VALUE: ÿßŸÑÿ™ÿπŸÇŸäÿØ ŸÖŸÜ 1 ÿ•ŸÑŸâ 5 }}"
---
### ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥: 
#### {{VALUE:ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥}}

### ÿßŸÑŸÇÿßÿ¶ŸÑ/ÿßŸÑŸÇÿßÿ¶ŸÑŸäŸÜ: 
#### {{VALUE:ÿßŸÑŸÇÿßÿ¶ŸÑ}}

### ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßŸÑÿØÿßÿ¶ŸÖÿ© ÿßŸÑŸÖÿ™ÿπŸÑŸÇÿ©

###### ÿßŸÑŸÖÿµÿØÿ±:
 {{VALUE:ÿßŸÑŸÖÿµÿØÿ±}}

###### ÿßŸÑŸÖÿ±ÿ¨ÿπ (Bibliography):

 {{VALUE:ÿßŸÑŸÖÿ±ÿ¨ÿπ}}
`
        },
        {
            name: 'ÿ£-ÿ¨Ÿáÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ÿßÿ™ÿµÿßŸÑ
ÿßŸÑÿßÿ≥ŸÖ: "{{VALUE:ÿßŸÑÿßÿ≥ŸÖ}}"
date: 
tags: 
ÿßŸÑŸÖŸáŸÜÿ©: "{{VALUE:ÿßŸÑÿØŸàÿ±}}"
ÿßŸÑŸÑÿ∫ÿ©: 
aliases:
---

## ‚Ñπ ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ:

{{VALUE:ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑÿßÿ™ÿµÿßŸÑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©}}
### üåê ÿßŸÑŸÖŸàŸÇÿπ:

{{VALUE:ÿßŸÑŸÖŸàŸÇÿπ}}
### üìß ÿßŸÑÿßŸäŸÖŸäŸÑ:

{{VALUE:ÿßŸÑÿßŸäŸÖŸäŸÑ}}
### üì± ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ:

{{VALUE:ÿ±ŸÇŸÖ ÿßŸÑŸáÿßÿ™ŸÅ}}
### üîó ŸÑŸäŸÜŸÉÿØŸäŸÜ:

{{VALUE:ŸÑŸäŸÜŸÉÿØŸäŸÜ}}
## ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ÿÆÿ±Ÿâ:

{{VALUE:ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿ£ÿÆÿ±Ÿâ}}
`
        },
        {
            name: 'ÿ£-ÿµŸÜÿØŸàŸÇ ÿßŸÑŸàÿßÿ±ÿØ-ÿßŸÅŸÉÿßÿ±.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÅŸÉÿ±ÿ©
ÿßŸÑÿ≠ÿßŸÑÿ©: 
date: 
tags:
  - {{VALUE:tags}}
ÿßŸÑŸÑÿ∫ÿ©: 
aliases:
---
## ÿ≠ŸàŸÑ:
{{VALUE:ÿ≠ŸàŸÑ ŸÖÿßÿ∞ÿß ÿ™ÿØŸàÿ± ÿßŸÑŸÅŸÉÿ±ÿ©}}

## ŸÖÿ™Ÿâ ÿ™ÿ™ŸàŸÇÿπ ÿßÿ≥ÿ™ÿÆÿØÿßŸÖŸáÿßÿü

## ŸÉŸäŸÅ ÿ™ÿ≥ÿ™ÿÆÿØŸÖŸáÿßÿü

## ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿÆÿ±Ÿâ ÿ∞ÿßÿ™ ÿµŸÑÿ©ÿü

`
        },
        {
            name: 'ÿ£-ŸÖÿ∑ÿßŸÑÿ®ÿßÿ™.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖÿ∑ÿßŸÑÿ®ÿ©
date:
tags:
  - {{VALUE:tags}}
ÿßŸÑŸÑÿ∫ÿ©:
aliases:
---
## ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©:
{{VALUE:ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©}}

## ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ


## ÿßŸÑŸÖÿµÿØÿ±:
{{VALUE:source}}

`
        },
        {
            name: 'ÿ£-ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿØÿßÿ¶ŸÖÿ©.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿØÿßÿ¶ŸÖÿ©
date:
tags:
  - {{VALUE:tags}}
ÿßŸÑŸÑÿ∫ÿ©:
aliases:
ÿßŸÑŸÇÿßÿ¶ŸÑ:
ÿßŸÑÿ™ÿ≠ŸÇŸÇ: "{{VALUE: ŸáŸÑ ÿ™ŸÖ ÿßŸÑÿ™ÿ≠ŸÇŸÇ}}"
ÿßŸÑÿßŸáŸÖŸäÿ©: "{{VALUE: ÿßŸÑÿßŸáŸÖŸäÿ© ŸÖŸÜ 1 ÿ•ŸÑŸâ 5 }}"
ŸÖÿ™Ÿâ ÿ™ÿ≥ÿ™ÿÆÿØŸÖ: "{{VALUE: ŸÖÿ™Ÿâ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ }}"
ÿßŸÑÿ™ÿπŸÇŸäÿØ: "{{VALUE: ÿßŸÑÿ™ÿπŸÇŸäÿØ ŸÖŸÜ 1 ÿ•ŸÑŸâ 5 }}"
---
{{VALUE:ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿßŸÑÿØÿßÿ¶ŸÖÿ©}}

## ÿßŸÑŸÖÿµÿØÿ±:
{{VALUE:ÿßŸÑŸÖÿµÿØÿ±}}

`
        },
        {
            name: 'ÿ®-ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ÿ∞ŸÉÿßÿ° ÿßÿµÿ∑ŸÜÿßÿπŸä.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ÿ∞ŸÉÿßÿ° ÿßÿµÿ∑ŸÜÿßÿπŸä
date: 
tags:
- {{VALUE:tags}} 
ÿßŸÑŸÑÿ∫ÿ©:
  - ar
aliases:
---
## {{VALUE:ÿßŸÑÿπŸÜŸàÿßŸÜ}}

### ÿßŸÑÿ±ÿßÿ®ÿ∑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ŸÑŸÑŸÖÿ≠ÿßÿØÿ´ÿ©:

{{VALUE:url}}

### ÿ£ÿØÿßÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ© :

{{VALUE:ÿ£ÿØÿßÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä}}
{{VALUE:ÿßŸÑÿßÿµÿØÿßÿ±}}
{{VALUE:ÿßŸÑÿ¥ÿ±ŸÉÿ©}}
### ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©:

{{VALUE:ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©}}

### ŸÖÿ´ÿßŸÑ ŸÑŸÑÿßÿ¥ÿßÿ±ÿ© ŸÑŸÑŸÖÿ±ÿ¨ÿπ:
(GPT-4 geminiÿå ÿ±ÿØŸãÿß ÿπŸÑŸâ "ÿ¥ÿ±ÿ≠ ŸÉŸäŸÅŸäÿ© ÿµŸÜÿπ ÿπÿ¨ŸäŸÜÿ© ÿßŸÑÿ®Ÿäÿ™ÿ≤ÿß ŸÖŸÜ ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑŸÖŸÜÿ≤ŸÑŸäÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ©", OpenAIÿå 7 ŸÖÿßÿ±ÿ≥ 2023)
### ÿßŸÑŸÖÿ±ÿ¨ÿπ:

{{VALUE:ÿ£ÿØÿßÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä}}-{{VALUE:ÿßŸÑÿßÿµÿØÿßÿ±}},ÿ±ÿØÿßŸã ÿπŸÑŸâ *"{{VALUE:ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©}}"*, {{VALUE:ÿßŸÑÿ¥ÿ±ŸÉÿ©}}, {{VALUE:ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿπŸÑŸâ ÿ¥ŸÉŸÑ  Month dd, yyyy}}
# üìì ÿßÿ≥ÿ™ÿ¥ÿßÿ±ÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä


***

## ‚ùì ÿßŸÑÿ≥ÿ§ÿßŸÑ / ÿßŸÑŸáÿØŸÅ
(ÿßŸÉÿ™ÿ® ÿßŸÑÿ≥ÿ§ÿßŸÑ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿä ÿ£Ÿà ŸáÿØŸÅ ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ŸáŸÜÿß)
{{VALUE:ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©}}

## üìã  ÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ©
(ÿßŸÉÿ™ÿ® ÿßŸÑÿ•ÿ¨ÿßÿ®ÿ© ÿπŸÑŸâ ÿßŸÑÿ£ÿ≥ÿ¶ŸÑÿ© ŸàÿßŸÑŸÖÿ≠ÿßÿØÿ´ÿ© ŸáŸÜÿß)

***

## üìù ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿßÿ™ ŸàÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™

***

# üó® ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™
(ÿ™ÿ≠ŸàŸäŸÑ ÿßŸÑŸÜŸÇÿßÿ∑ ÿßŸÑÿ®ÿßÿ±ÿ≤ÿ© ÿ•ŸÑŸâ ÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™ ÿ•ÿ∞ÿß ŸÑÿ≤ŸÖ ÿßŸÑÿ£ŸÖÿ±)
ÿßÿ≥ÿ™ÿÆÿØŸÖ ÿ™ŸÜÿ≥ŸäŸÇ ÿßŸÑÿßŸÇÿ™ÿ®ÿßÿ≥ ÿßŸÑÿ™ÿßŸÑŸä:
{{VALUE:ÿ£ÿØÿßÿ© ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä}}-{{VALUE:ÿßŸÑÿßÿµÿØÿßÿ±}},ÿ±ÿØÿßŸã ÿπŸÑŸâ *"{{VALUE:ÿßŸÑŸÖÿ∑ÿßŸÑÿ®ÿ©}}"*, {{VALUE:ÿßŸÑÿ¥ÿ±ŸÉÿ©}}, {{VALUE:ÿßŸÑÿ™ÿßÿ±ŸäÿÆ ÿπŸÑŸâ ÿ¥ŸÉŸÑ  Month dd, yyyy}}
`
        },
        {
            name: 'ÿ®-ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿØÿ®Ÿäÿ©-ŸÖŸÇÿßŸÑÿßÿ™.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ£ÿØÿ®Ÿäÿ©
date: 
ÿßŸÑŸÉÿßÿ™ÿ®: 
tags:
- {{VALUE:tags}} 
ÿßŸÑŸÑÿ∫ÿ©: 
aliases: 
---

### ÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß
{{{VALUE:ÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß}}}
# üìì ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßŸÑÿ£ÿØÿ®Ÿäÿ©


## ##  ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ŸàÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™


# # üó® ÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™

{{{VALUE:ÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß}}}

# ‚úí ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßŸÑÿØÿßÿ¶ŸÖÿ©


###### ÿßŸÑŸÖÿµÿØÿ±:
 {{VALUE:ÿßŸÑŸÖÿµÿØÿ±}}
`
        },
        {
            name: 'ÿ®-ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿØÿ®Ÿäÿ©-ŸÖŸÑÿÆÿµÿßÿ™ ŸäŸàÿ™ŸäŸàÿ®.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖŸÑÿßÿ≠ÿ∏ÿ© ÿ£ÿØÿ®Ÿäÿ©
date: 
ÿßŸÑŸÉÿßÿ™ÿ®: 
tags: 
- {{VALUE:tags}} 

ÿßŸÑŸÜÿ¥ÿ±: 
ÿßŸÑŸÑÿ∫ÿ©: 
aliases:
---
### ÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß
{{{VALUE:ÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß}}}

# üìì ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ£ÿØÿ®Ÿäÿ©


## ##  ÿßŸÑÿ™ÿ≠ÿØŸäÿØÿßÿ™ ŸàÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™

# # üó® ÿßŸÇÿ™ÿ®ÿßÿ≥ÿßÿ™

{{VALUE:ÿßŸÑÿ®ÿ®ŸÑŸäŸàÿ∫ÿ±ÿßŸÅŸäÿß}}
# # ‚úí ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿßŸÑÿØÿßÿ¶ŸÖÿ©


###### ÿßŸÑŸÖÿµÿØÿ±:
 {{VALUE:ÿßŸÑŸÖÿµÿØÿ±}}


###### Source:
 {{VALUE:ÿßŸÑŸÖÿµÿØÿ±}}
`
        },
        {
            name: 'ŸÖÿ≠ÿ™ŸàŸâ-ÿßŸÑŸâ-ÿ´-ŸÇŸÜÿßÿ© ÿßŸÑŸäŸàÿ™ŸäŸàÿ®-ÿ®ŸÜÿßÿ° ÿπÿßÿØÿßÿ™ ÿßŸÅÿ∂ŸÑ.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖÿ¥ÿ±Ÿàÿπ
---
# 1 ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ®ÿ≠ÿ´
## 1.1 ŸÅŸáŸÖ ÿ≥ŸäŸÉŸàŸÑŸàÿ¨Ÿäÿ© ÿßŸÑÿπÿßÿØÿßÿ™ ÿßŸÑÿ≠ÿ≥ŸÜÿ©
## 1.2 ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿπÿßÿØÿßÿ™ ÿßŸÑÿ¨ŸäÿØÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ© 
## 1.3 ÿ™ÿ≠ŸÑŸäŸÑ ŸÇÿµÿµ ÿßŸÑŸÜÿ¨ÿßÿ≠ 

# 2 ÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
## 2.1 ŸÇÿßÿ¶ŸÖÿ© ŸÖŸàÿßÿ∂Ÿäÿπ ÿßŸÑŸÅŸäÿØŸäŸà
## 2.2 ŸáŸäŸÉŸÑ ÿßŸÑÿ≠ŸÑŸÇÿ©
## 2.3 ŸÇŸàÿßŸÑÿ® ÿßŸÑŸÜÿµ ÿßŸÑÿ®ÿ±ŸÖÿ¨Ÿä

# 3 ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨
## 3.1 ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿπÿØÿßÿ™
## 3.2 ŸÖŸàŸÇÿπ ÿßŸÑÿ™ÿµŸàŸäÿ±
## 3.3 ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ•ÿ∂ÿßÿ°ÿ© ŸàÿßŸÑÿµŸàÿ™

# 4 ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
## 4.1 ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ≠ŸÑŸÇÿ©
## 4.2 ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ™ÿ≠ÿ±Ÿäÿ±
## 4.3 ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿµŸàÿ± ÿßŸÑŸÖÿµÿ∫ÿ±ÿ© 

# 5 ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿ™Ÿàÿ≤Ÿäÿπ
## 5.1 ÿ¨ÿØŸàŸÑ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
## 5.2 ÿßŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ÿπÿ®ÿ± ÿßŸÑŸÖŸÜÿµÿßÿ™
## 5.3 ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ`
        },
        {
            name: 'ŸÖÿ≠ÿ™ŸàŸâ-ÿßŸÑŸâ-ÿ´-ŸÇŸÜÿßÿ© ÿßŸÑŸäŸàÿ™ŸäŸàÿ®-ŸÉÿ≥ÿ± ÿπÿßÿØÿßÿ™ ÿ≥Ÿäÿ¶ÿ©.md',
            content: `---
ÿßŸÑŸÜŸàÿπ: ŸÖÿ¥ÿ±Ÿàÿπ
---
# 1 ŸÖÿ±ÿ≠ŸÑÿ© ÿßŸÑÿ®ÿ≠ÿ´
## 1.1 ŸÅŸáŸÖ ÿ≥ŸäŸÉŸàŸÑŸàÿ¨Ÿäÿ© ÿßŸÑÿπÿßÿØÿßÿ™ ÿßŸÑÿ≥Ÿäÿ¶ÿ©
## 1.2 ÿ™ÿ≠ÿØŸäÿØ ÿßŸÑÿπÿßÿØÿßÿ™ ÿßŸÑÿ≥Ÿäÿ¶ÿ© ÿßŸÑÿ¥ÿßÿ¶ÿπÿ© 
## 1.3 ÿ™ÿ≠ŸÑŸäŸÑ ŸÇÿµÿµ ÿßŸÑŸÜÿ¨ÿßÿ≠ 

# 2 ÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
## 2.1 ŸÇÿßÿ¶ŸÖÿ© ŸÖŸàÿßÿ∂Ÿäÿπ ÿßŸÑŸÅŸäÿØŸäŸà
## 2.2 ŸáŸäŸÉŸÑ ÿßŸÑÿ≠ŸÑŸÇÿ©
## 2.3 ŸÇŸàÿßŸÑÿ® ÿßŸÑŸÜÿµ ÿßŸÑÿ®ÿ±ŸÖÿ¨Ÿä

# 3 ÿ•ÿπÿØÿßÿØ ÿßŸÑÿ•ŸÜÿ™ÿßÿ¨
## 3.1 ŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸÖÿπÿØÿßÿ™
## 3.2 ŸÖŸàŸÇÿπ ÿßŸÑÿ™ÿµŸàŸäÿ±
## 3.3 ÿ•ÿπÿØÿßÿØÿßÿ™ ÿßŸÑÿ•ÿ∂ÿßÿ°ÿ© ŸàÿßŸÑÿµŸàÿ™

# 4 ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
## 4.1 ÿ™ÿ≥ÿ¨ŸäŸÑ ÿßŸÑÿ≠ŸÑŸÇÿ©
## 4.2 ÿπŸÖŸÑŸäÿ© ÿßŸÑÿ™ÿ≠ÿ±Ÿäÿ±
## 4.3 ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿµŸàÿ± ÿßŸÑŸÖÿµÿ∫ÿ±ÿ© 

# 5 ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿ™Ÿàÿ≤Ÿäÿπ
## 5.1 ÿ¨ÿØŸàŸÑ ÿßŸÑÿ™ÿ≠ŸÖŸäŸÑ
## 5.2 ÿßŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ÿπÿ®ÿ± ÿßŸÑŸÖŸÜÿµÿßÿ™
## 5.3 ŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ
`
        },
        {
            name: 'ŸÖÿ≠ÿ™ŸàŸâ-ÿßŸÑŸâ-ÿ´-ŸÖÿ¥ÿßÿ±Ÿäÿπ-ŸÖŸàŸÇÿπ ŸÇŸàÿ© ÿßŸÑÿπÿßÿØÿßÿ™.md',
            content: `---
type: project
---
# 0 ŸÖŸÇÿØŸÖÿ©

# 1 ÿßŸÑÿ±ÿ§Ÿäÿ© ŸàÿßŸÑÿ£ÿ≥ÿßÿ≥ ÿßŸÑŸÖŸÅÿßŸáŸäŸÖŸä
## 1.1 ÿßŸÑÿ∫ÿ±ÿ∂ ŸÖŸÜ ÿßŸÑŸÖÿ¥ÿ±Ÿàÿπ
### 1.1.1.1 ÿ®ŸäÿßŸÜ ÿßŸÑŸÖŸáŸÖÿ©
### 1.1.2 ÿßŸÑŸÖÿ¥ŸÉŸÑÿ© ÿßŸÑÿ™Ÿä Ÿäÿ≠ŸÑŸáÿß ÿßŸÑŸÖŸàŸÇÿπ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä
### 1.1.3 ÿßŸÑÿ¨ŸÖŸáŸàÿ± ÿßŸÑŸÖÿ≥ÿ™ŸáÿØŸÅ Ÿàÿ≠ÿßŸÑÿßÿ™ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
## 1.2 ÿßŸÑŸÅŸÑÿ≥ŸÅÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
### 1.2.1 ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑÿ≥ŸÑŸàŸÉ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ™ÿµŸÖŸäŸÖ
### 1.2.2.2 ÿßŸÑÿπŸÑÿßŸÇÿ© ÿ®ŸäŸÜ ÿßŸÑÿπÿßÿØÿßÿ™ ŸàÿßŸÑÿ£ÿØŸàÿßÿ™ ÿßŸÑÿ±ŸÇŸÖŸäÿ©
### 1.2.3 ÿßŸÑÿ™ŸÖŸÉŸäŸÜ ŸÖŸÜ ÿÆŸÑÿßŸÑ ÿßŸÑÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ∞ÿßÿ™Ÿä
## 1.3 ÿßŸÑÿ£ŸáÿØÿßŸÅ ÿßŸÑÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ©
### 1.3.1 ÿ≤ŸäÿßÿØÿ© ÿßŸÑŸÖÿ¥ÿßÿ±ŸÉÿ© ÿßŸÑŸäŸàŸÖŸäÿ©
### 1.3.2 ÿ™ÿ¥ÿ¨Ÿäÿπ ÿ™ŸÉŸàŸäŸÜ ÿπÿßÿØÿßÿ™ ŸÖÿ™ÿ≥ŸÇÿ©
### 1.3.3.3 ÿ®ŸÜÿßÿ° ŸÖÿ¨ÿ™ŸÖÿπ ÿ≠ŸàŸÑ ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ∞ÿßÿ™Ÿä

# 2 ÿßŸÑÿ®ÿ≠ÿ´ ŸàÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™
## 2.1 ÿ£ÿ®ÿ≠ÿßÿ´ ÿßŸÑÿ≥ŸàŸÇ ŸàÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
### 2.1.1.1 ÿ™ÿ≠ŸÑŸäŸÑ ÿßŸÑŸÖŸÜÿßŸÅÿ≥ŸäŸÜ (Habiticaÿå Notionÿå ÿ•ŸÑÿÆ.)
### ÿ™ÿ∑ŸàŸäÿ± ÿ¥ÿÆÿµŸäÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
### 2.1.3 ÿ±ÿ≥ŸÖ ÿÆÿ±ÿßÿ¶ÿ∑ ÿßŸÑÿ≥ŸÑŸàŸÉ ŸàŸÜŸÇÿßÿ∑ ÿßŸÑÿ£ŸÑŸÖ
## 2.2 ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑŸàÿ∏ŸäŸÅŸäÿ©
### 2.2.1 ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ŸàÿßŸÑŸàÿ≠ÿØÿßÿ™ ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿäÿ©
### 2.2.2.2 ÿ£ÿØŸàÿßÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ŸàÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™
### 2.2.3 ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑŸàÿµŸàŸÑ ŸàÿßŸÑÿßÿ≠ÿ™Ÿäÿßÿ¨ÿßÿ™ ŸÖÿ™ÿπÿØÿØÿ© ÿßŸÑŸÑÿ∫ÿßÿ™
## 2.3 ÿßŸÑŸÖÿ™ÿ∑ŸÑÿ®ÿßÿ™ ÿßŸÑÿ™ŸÇŸÜŸäÿ©
### 2.3.1 ÿ™ŸÇŸäŸäŸÖ ŸÖŸÉÿØÿ≥ ÿßŸÑÿ™ŸÉŸÜŸàŸÑŸàÿ¨Ÿäÿß 
#### 2.3.2 ÿßÿ≥ÿ™ÿ±ÿßÿ™Ÿäÿ¨Ÿäÿ© ÿßŸÑÿßÿ≥ÿ™ÿ∂ÿßŸÅÿ© ŸàÿßŸÑŸÜÿ¥ÿ±
#### 2.3.3.3 ÿßŸÑÿ£ŸÖŸÜ Ÿàÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
### 2.3.3 ÿßŸÑÿ£ŸÖŸÜ Ÿàÿ≠ŸÖÿßŸäÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™

# 3 ÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿπŸÑŸàŸÖÿßÿ™
# ## 3.1 ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑ ÿßŸÑŸáŸäŸÉŸÑŸä
### 3.1.1.1 ÿÆÿ±Ÿäÿ∑ÿ© ÿßŸÑŸÖŸàŸÇÿπ ŸàÿßŸÑÿ™ÿµŸÅÿ≠
### 3.1.2 ÿßŸÑÿ™ÿ≥ŸÑÿ≥ŸÑ ÿßŸÑŸáÿ±ŸÖŸä ŸÑŸÑÿµŸÅÿ≠ÿßÿ™
### 3.1.3 ÿ≥ŸäŸÜÿßÿ±ŸäŸàŸáÿßÿ™ ÿ™ÿØŸÅŸÇ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ### 3.1.3 ÿ≥ŸäŸÜÿßÿ±ŸäŸàŸáÿßÿ™ ÿ™ÿØŸÅŸÇ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
## 3.2 ÿ®ŸÜŸäÿ© ÿßŸÑŸÖÿ≠ÿ™ŸàŸâ
### 3.2.1 ŸÖŸÉÿ™ÿ®ÿ© ÿßŸÑÿπÿßÿØÿßÿ™ 
### 3.2.2.2 ŸÑŸàÿ≠ÿ© ŸÖÿπŸÑŸàŸÖÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
### 3.2.3 ŸÇÿ≥ŸÖ ÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ÿßŸÑÿ™ŸÇÿØŸÖ
## 3.3 ÿ™ÿÆÿ∑Ÿäÿ∑ ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
### 3.3.1 ÿßŸÑÿ•ÿ∑ÿßÿ±ÿßÿ™ ÿßŸÑÿ≥ŸÑŸÉŸäÿ©
### 3.3.2 ÿßŸÑŸÜŸÖÿßÿ∞ÿ¨ ÿßŸÑÿ£ŸàŸÑŸäÿ© ŸÖŸÜÿÆŸÅÿ∂ÿ© ÿßŸÑÿØŸÇÿ©
### 3.3.3.3 ÿ≠ŸÑŸÇÿßÿ™ ÿ™ÿπŸÑŸäŸÇÿßÿ™ ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ

# 4 ÿ™ÿµŸÖŸäŸÖ Ÿàÿßÿ¨Ÿáÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ/ÿ™ÿ¨ÿ±ÿ®ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
## 4.1 ÿßŸÑŸáŸàŸäÿ© ÿßŸÑŸÖÿ±ÿ¶Ÿäÿ©
### 4.1.1.1 ÿßŸÑÿ¥ÿπÿßÿ± ŸàÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©
### 4.1.2 ÿ≥ŸäŸÉŸàŸÑŸàÿ¨Ÿäÿ© ÿßŸÑÿ£ŸÑŸàÿßŸÜ (ÿßŸÑÿ™ÿ±ŸÉŸäÿ≤ÿå ÿßŸÑŸáÿØŸàÿ°ÿå ÿßŸÑÿ∑ÿßŸÇÿ©)
### 4.1.3 ÿßŸÑÿ∑ÿ®ÿßÿπÿ© Ÿàÿ¥ÿ®ŸÉÿßÿ™ ÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑
## 4.2 ÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿ™ÿ¨ÿ±ÿ®ÿ©
### 4.2.1 ÿßŸÑÿ®ÿ≥ÿßÿ∑ÿ© ŸàÿßŸÑŸàÿ∂Ÿàÿ≠
 ### 4.2.2 ÿßŸÑÿ™ŸÑÿπŸäÿ® ŸàÿßŸÑÿ™ÿ≠ŸÅŸäÿ≤
### 4.2.3 ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿßŸÑÿπÿßÿ∑ŸÅŸä ŸàÿßŸÑÿ™ÿ¥ÿ¨Ÿäÿπ 
## 4.3 ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ™ÿµŸÖŸäŸÖ
### 4.3.1 ÿßŸÑŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑŸÇÿßÿ®ŸÑÿ© ŸÑÿ•ÿπÿßÿØÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
### 4.3.2 ÿØŸÑŸäŸÑ ÿßŸÑŸÜŸÖÿ∑
### 4.3.3.3 ŸÖÿπÿßŸäŸäÿ± ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑŸàÿµŸàŸÑ

# 5 ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸàÿßÿ¨Ÿáÿ© ÿßŸÑÿ£ŸÖÿßŸÖŸäÿ©
## 5.1 ÿßÿÆÿ™Ÿäÿßÿ± ÿßŸÑÿ•ÿ∑ÿßÿ±
### 5.1.1 ÿ™ŸÇŸäŸäŸÖ React ÿ£Ÿà Vue
### 5.1.2 ÿßŸÑÿ™ÿµŸÖŸäŸÖ ÿßŸÑŸÖÿ™ÿ¨ÿßŸàÿ® Ÿàÿ£ŸàŸÑŸàŸäÿ© ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑŸÖÿ≠ŸÖŸàŸÑ
### 5.1.3 ÿ•ÿØÿßÿ±ÿ© ÿßŸÑÿ≠ÿßŸÑÿ© (ÿ±ŸäÿØÿßŸÉÿ≥ ÿ£Ÿà ÿ®ŸäŸÜŸäÿß ÿ£Ÿà ÿßŸÑÿ≥ŸäÿßŸÇ)
## 5.2 ÿ™ÿ∑ŸàŸäÿ± ÿßŸÑŸÖŸÉŸàŸëŸÜÿßÿ™
### 5.2.1 ŸÖŸÉŸàŸÜÿßÿ™ ÿßŸÑÿ™ŸÜŸÇŸÑ ŸàÿßŸÑÿ™ÿÆÿ∑Ÿäÿ∑
### 5.2.2.2 ŸÖŸÉŸàŸÜÿßÿ™ ÿ™ÿπŸÇÿ® ÿßŸÑÿπÿßÿØÿ©
### 5.2.3 ÿπŸÜÿßÿµÿ± ÿ™ÿµŸàÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ (ÿßŸÑÿ±ÿ≥ŸàŸÖ ÿßŸÑÿ®ŸäÿßŸÜŸäÿ©ÿå Ÿàÿ£ÿ¥ÿ±ÿ∑ÿ© ÿßŸÑÿ™ŸÇÿØŸÖ)
## 5.3 ÿ∑ÿ®ŸÇÿ© ÿ™ŸÅÿßÿπŸÑ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ 
### 5.3.1 ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿµÿ≠ÿ© ÿßŸÑÿ•ÿØÿÆÿßŸÑ
### 5.3.2 ÿßŸÑÿ•ÿÆÿ∑ÿßÿ±ÿßÿ™ ŸàÿßŸÑÿ™ÿπŸÑŸäŸÇÿßÿ™
### 5.3.3.3 ÿπŸÜÿßÿµÿ± ÿßŸÑÿ™ÿ≠ŸÉŸÖ ŸÅŸä ÿ•ŸÖŸÉÿßŸÜŸäÿ© ÿßŸÑŸàÿµŸàŸÑ

# 6 ÿßŸÑÿ™ÿ∑ŸàŸäÿ± ÿßŸÑÿÆŸÑŸÅŸä
## 6.1 ÿßŸÑÿ®ŸÜŸäÿ© Ÿàÿ•ÿ∑ÿßÿ± ÿßŸÑÿπŸÖŸÑ
### 6.1.1.1 ÿ™ÿµŸÖŸäŸÖ Ÿàÿßÿ¨Ÿáÿ© ÿ®ÿ±ŸÖÿ¨ÿ© ÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ RESTful ÿ£Ÿà GraphQL
### 6.1.2 ÿßÿÆÿ™Ÿäÿßÿ± ÿ•ÿ∑ÿßÿ± ÿßŸÑÿπŸÖŸÑ (Node.jsÿå Djangoÿå ÿ•ŸÑÿÆ)
### 6.1.3 ÿßŸÑŸÖÿµÿßÿØŸÇÿ© ŸàÿßŸÑÿ™ÿÆŸàŸäŸÑ 
## 6.2 ÿ™ÿµŸÖŸäŸÖ ŸÇÿßÿπÿØÿ© ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™
### 6.2.1 ŸÖÿÆÿ∑ÿ∑ ŸÑŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ŸàÿßŸÑÿπÿßÿØÿßÿ™ 
### 6.2.2.2 ÿ¨ÿØÿßŸàŸÑ ÿ™ÿ™ÿ®ÿπ ÿßŸÑÿ™ŸÇÿØŸÖ
### 6.2.3 ÿ™ÿÆÿ≤ŸäŸÜ ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ŸàÿßŸÑÿ±ÿ§Ÿâ 
# ## 6.3 ÿßŸÑÿ™ŸÉÿßŸÖŸÑ ŸàÿßŸÑÿ£ÿ™ŸÖÿ™ÿ©
### 6.3.1 ŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®ÿ±ŸäÿØ ÿßŸÑÿ•ŸÑŸÉÿ™ÿ±ŸàŸÜŸä/ÿßŸÑÿ™ŸÜÿ®ŸäŸáÿßÿ™
### 6.3.2 ÿ™ŸÉÿßŸÖŸÑ Ÿàÿßÿ¨Ÿáÿ© ÿ®ÿ±ŸÖÿ¨ÿ© ÿßŸÑÿ™ÿ∑ÿ®ŸäŸÇÿßÿ™ (ÿßŸÑÿ™ŸÇŸàŸäŸÖÿå ÿßŸÑÿ£ÿ¨Ÿáÿ≤ÿ© ÿßŸÑŸÇÿßÿ®ŸÑÿ© ŸÑŸÑÿßÿ±ÿ™ÿØÿßÿ°)
### 6.3.3.3 ÿßŸÑŸàÿ∏ÿßÿ¶ŸÅ ÿßŸÑŸÖÿ¨ÿØŸàŸÑÿ© ŸÑŸÑÿ™ÿ∞ŸÉŸäÿ±

# 7 ŸÖŸÜÿ∑ŸÇ ŸÜÿ∏ÿßŸÖ ÿßŸÑÿπÿßÿØÿ© 
## 7.1 ŸÖÿ≠ÿ±ŸÉ ÿßŸÑÿπÿßÿØÿ© ÿßŸÑÿ£ÿ≥ÿßÿ≥Ÿä
### 7.1.1.1 ŸÜŸÖŸàÿ∞ÿ¨ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿπÿßÿØÿ©
### 7.1.2 ÿÆŸàÿßÿ±ÿ≤ŸÖŸäÿ© ÿßŸÑŸÖŸÉÿßŸÅÿ£ÿ© ÿßŸÑÿ±Ÿàÿ™ŸäŸÜŸäÿ©-ÿßŸÑÿ•ÿ±ÿ¥ÿßÿØŸäÿ©
### 7.1.3 ÿ™ÿ™ÿ®ÿπ ŸÖÿ≥ÿßÿ± ÿßŸÑÿπÿßÿØÿ© 
## 7.2 ÿ∑ÿ®ŸÇÿ© ÿßŸÑÿ™ŸÑÿπŸäÿ®
### 7.2.1 ÿßŸÑŸÜŸÇÿßÿ∑ ŸàÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™
### 7.2.2.2 ÿ¥ÿßÿ±ÿßÿ™ ÿßŸÑÿ•ŸÜÿ¨ÿßÿ≤
### 7.2.3 ÿ™ÿ≠ÿØŸäÿßÿ™ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ
## 7.3 ÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™ ŸàÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ 
### 7.3.1 ŸÑŸàÿ≠ÿ© ŸÖÿ™ÿßÿ®ÿπÿ© ÿßŸÑÿ™ŸÇÿØŸÖ ÿßŸÑŸäŸàŸÖŸä
### 7.3.2 ÿ±ÿ§Ÿâ ÿßŸÑÿ≥ŸÑŸàŸÉ 
### 7.3.3.3 ÿßŸÑÿ™ŸàÿµŸäÿßÿ™ ÿßŸÑŸÖÿÆÿµÿµÿ© 

# 8 ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± Ÿàÿ∂ŸÖÿßŸÜ ÿßŸÑÿ¨ŸàÿØÿ©
## 8.1 ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸàÿ∏ŸäŸÅŸä
### 8.1.1 ÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ ÿßŸÑŸàÿ≠ÿØÿ© 
### 8.1.2 ÿßÿÆÿ™ÿ®ÿßÿ±ÿßÿ™ ÿßŸÑÿ™ŸÉÿßŸÖŸÑ 
### 8.1.3 ÿßŸÑÿ™ÿØŸÅŸÇ ŸÖŸÜ ÿßŸÑŸÜŸáÿßŸäÿ© ÿ•ŸÑŸâ ÿßŸÑŸÜŸáÿßŸäÿ©
## 8.2 ÿßÿÆÿ™ÿ®ÿßÿ± ŸÇÿßÿ®ŸÑŸäÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
### 8.2.1 ŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™ ÿ¨ŸÑÿ≥ÿ© ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
### 8.2.2.2 ÿ™ŸÇŸäŸäŸÖ ÿ≥ŸáŸàŸÑÿ© ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ
### 8.2.3 ÿßÿÆÿ™ÿ®ÿßÿ± ÿ™ÿµŸÖŸäŸÖ A/B
## 8.3 ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ£ÿØÿßÿ° ŸàÿßŸÑÿ£ŸÖÿßŸÜ
### 8.3.1 ÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑÿ≠ŸÖŸÑ ŸàÿßŸÑÿ≥ÿ±ÿπÿ©
### 8.3.2 ŸÅÿ≠ÿµ ÿßŸÑÿ´ÿ∫ÿ±ÿßÿ™ ÿßŸÑÿ£ŸÖŸÜŸäÿ© 
### 8.3.3.3 ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿ™ÿ¥ŸÅŸäÿ± ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™

# 9 ÿßŸÑŸÜÿ¥ÿ± ŸàÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ
## 9.1 ÿ•ÿπÿØÿßÿØ ÿßŸÑÿßÿ≥ÿ™ÿ∂ÿßŸÅÿ©
### 9.1.1.1 ÿ™ŸÉŸàŸäŸÜ ÿßŸÑÿÆÿßÿØŸÖ
### 9.1.2 ÿÆÿ∑ ÿ£ŸÜÿßÿ®Ÿäÿ® CI/CD Pipeline
### 9.1.3 ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿßŸÑÿ®Ÿäÿ¶ÿ© 
## 9.2 ŸÇÿßÿ¶ŸÖÿ© ŸÖÿ±ÿßÿ¨ÿπÿ© ŸÖÿß ŸÇÿ®ŸÑ ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ
### 9.2.1 ŸÖÿ±ÿßÿ¨ÿπÿ© ÿ∂ŸÖÿßŸÜ ÿßŸÑÿ¨ŸàÿØÿ© ÿßŸÑŸÜŸáÿßÿ¶Ÿä
### 9.2.2.2 ÿ™ÿ≠ÿ≥ŸäŸÜ ŸÖÿ≠ÿ±ŸÉÿßÿ™ ÿßŸÑÿ®ÿ≠ÿ´ ŸàÿßŸÑÿπŸÑÿßŸÖÿßÿ™ ÿßŸÑŸàÿµŸÅŸäÿ©
### 9.2.3 ÿßŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑÿ™ÿ¨ÿ±Ÿäÿ®Ÿä ŸÖÿπ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ ÿßŸÑÿ£Ÿàÿßÿ¶ŸÑ
# ## 9.3 ÿ™ŸÜŸÅŸäÿ∞ ÿßŸÑÿ•ÿ∑ŸÑÿßŸÇ
### 9.3.1 ÿ∑ÿ±ÿ≠ ÿßŸÑÿ™ÿ≥ŸàŸäŸÇ 
### 9.3.2 ÿ™ÿ£ŸáŸäŸÑ ÿßŸÑŸÖÿ¨ÿ™ŸÖÿπ
### 9.3.3.3 ÿ™ŸÅÿπŸäŸÑ ŸÇŸÜŸàÿßÿ™ ÿßŸÑÿØÿπŸÖ

# 10 ÿßŸÑÿµŸäÿßŸÜÿ© ŸàÿßŸÑŸÜŸÖŸà
## 10.1 ÿßŸÑÿ™ÿ≠ÿ≥ŸäŸÜ ÿßŸÑŸÖÿ≥ÿ™ŸÖÿ±
### 10.1.1.1 ÿ™ŸÉÿ±ÿßÿ± ÿßŸÑŸÖŸäÿ≤ÿßÿ™ ÿ®ŸÜÿßÿ°Ÿã ÿπŸÑŸâ ÿßŸÑŸÖŸÑÿßÿ≠ÿ∏ÿßÿ™
### 10.1.2 ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ŸàÿßŸÑÿ•ÿµŸÑÿßÿ≠ÿßÿ™ ÿßŸÑŸÖŸÜÿ™ÿ∏ŸÖÿ©
### 10.1.3 ÿ™ŸÜŸÇŸäÿ≠ ÿßŸÑÿ™ÿµŸÖŸäŸÖ 
## 10.2 ÿßŸÑÿ®ŸäÿßŸÜÿßÿ™ ŸàÿßŸÑÿ™ÿ≠ŸÑŸäŸÑÿßÿ™
### 10.2.1 ŸÖŸÇÿßŸäŸäÿ≥ ÿßŸÑÿßÿ≠ÿ™ŸÅÿßÿ∏ ÿ®ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖŸäŸÜ
### 10.2.2.2 ÿ™ŸÇÿßÿ±Ÿäÿ± ÿßŸÑÿ™ŸÅÿßÿπŸÑ
### 10.2.3 ÿ™ÿ≠ŸÑŸäŸÑ ŸÖÿπÿØŸÑ ŸÜÿ¨ÿßÿ≠ ÿßŸÑÿπÿßÿØÿ© 
## 10.3 ÿßŸÑÿ™Ÿàÿ≥ÿπ ÿ∑ŸàŸäŸÑ ÿßŸÑÿ£ÿ¨ŸÑ 
### 10.3.1 ÿ™ŸÉÿßŸÖŸÑ ÿ™ÿ∑ÿ®ŸäŸÇ ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑŸÖÿ≠ŸÖŸàŸÑ
### 10.3.2 Ÿàÿ≠ÿØÿ© ŸÖÿØÿ±ÿ® ÿßŸÑÿπÿßÿØÿ© ÿ®ÿßŸÑÿ∞ŸÉÿßÿ° ÿßŸÑÿßÿµÿ∑ŸÜÿßÿπŸä
### 10.3.3.3 ÿßŸÑÿ¥ÿ±ÿßŸÉÿßÿ™ ŸàŸÜŸÖŸà ÿßŸÑŸÜÿ∏ÿßŸÖ ÿßŸÑÿ®Ÿäÿ¶Ÿä
`
        }
    ];

    for (const template of templates) {
        const filePath = `${examplesPath}/${template.name}`;
        try {
            const existing = app.vault.getAbstractFileByPath(filePath);
            if (!existing) {
                await app.vault.create(filePath, template.content);
            }
        } catch (error) {
            if (error instanceof Error && error.message.includes('already exists')) {
                continue;
            }
            console.error(`Failed to create Arabic template example ${template.name}:`, error);
        }
    }
}
